;------------------------------------------------------------------------------
;UNIVSERSIDAD DEL VALLE DE GUATEMALA
;INTEGRANTES
;Bryan Sanders		    17294
;Matias			    carnet 16247
;
;FECHA: 10/11/2018
;Prgramacion para el control de cuatro distintos servos para el control de un 
;brazo de madera como proyecto final del curso de Microcontroladores.
;Se implementa un ADC para el manejo analogo de datos para tener un control mas
;preciso del brazo al igual que comunicacion serial para comunicarse con una
;commputadora que estara reciviendo y mandando datos hacia el PIC16877 el cual
;mandara los datos necesarios para mover los distintos servos.



#include "p16f887.inc"

; CONFIG1
; __config 0xE0D4
 __CONFIG _CONFIG1, _FOSC_INTRC_NOCLKOUT & _WDTE_OFF & _PWRTE_OFF & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _BOREN_OFF & _IESO_OFF & _FCMEN_OFF & _LVP_OFF
; CONFIG2
; __config 0xFFFF
 __CONFIG _CONFIG2, _BOR4V_BOR40V & _WRT_OFF

 
cblock		0X021
    W_TEMP , STATUS_TEMP		
	
    TMR0_COUNT_1, TMR0_COUNT_2		;DELAY1 VARIABLE
    ADC_T_1, ADC_T_2			;JOYSTICK X AXIS TEST VARIABLE ;JOYSTICK Y AXIS TEST VARIABLE
    JOYSTICK_X_1 , JOYSTICK_Y_1		;JOYSTICK 1 X MOVEMENT VALUE ;JOYSTICK 1 Y MOVEMENT VALUE
    TMR0_POSITION		;TMR0 count
endc
    
RES_VECT    CODE    0x0000		;VECTOR RESET
 GOTO	SETUP 

ISR_VECT    CODE    0X0004		;INTERRUPT VECTOR

MAIN_PROG CODE                      ; let linker place main program

SETUP:
    CALL    PORT_CONFIG
    CALL    OSCCON_CONFIG
    CALL    ADC_CONFIG
    CALL    TMR0_CONFIG
    CALL    TX_RX_CONFIG
 ;STEP 4 -> BEGIN CONVERSION BY SETTING THE ADCON0 GO/DONE BIT
 ;STEP 5 -> WAIT FOR THE ADC TO FINISH. CHECK GO/DONE BIT OR ADC INTERRUPT FLAG
 ;STEP 6 -> READ ADC RESULT FROM ADRESH FOR MSB AND ADRESL FOR LSB
 ;STEP 7 -> CLEAR ADC INTERRUPT FLAG
    MOVLW   h'80'
    MOVWF   JOYSTICK_X_1
    MOVWF   JOYSTICK_Y_1
 
    BSF		ADCON0, GO
LOOP:
    BCF		STATUS, RP0
    BTFSS	PIR1, ADIF
    GOTO	$-1
    CALL	ADC_CHECK_1
    
    BTFSS	PIR1, ADIF
    GOTO	$-1
    CALL	ADC_CHECK_2
    GOTO	LOOP

ADC_CHECK_1:
    MOVF	ADRESH, W	    ;MOVE ADRESH VALUE TO W REGISTRY
    MOVWF	ADC_T_1		    ;MOVE W VALUE TO THE ADC_T_1 CHECK
    CALL	JOYSTICK_1_ACTION   ;GO TO THE ADC ACTION LOGIC FOR JOY_S_1
    BCF		PIR1, ADIF	    ;CLEAR ADC INTERRUPT FLAG
    BSF		ADCON0, CHS0	    ;CHANGE CHANNEL TO AN1
    BSF		ADCON0, GO
    RETURN
    
ADC_CHECK_2:
    MOVF	ADRESH, W	    ;MOVE ADRESH VALUE TO W REGISTRY
    MOVWF	ADC_T_2		    ;MOVE W VALUE TO ADC_T_2 CHECK
    CALL	JOYSTICK_1_ACTION   ;GO TO THE ADC ACTION LOGIC FOR JOY_S_2   
    BCF		PIR1, ADIF	    ;CLEAR THE ADC INTERRUPT FLAG
    BCF		ADCON0, CHS0	    ;CHANGE CHANNEL TO AN1
    BSF		ADCON0, GO
    RETURN    
    
JOYSTICK_1_ACTION:
    BTFSS	ADC_T_1, 7	;CHECK IF ADC VALUE FROM X AXIS NEUTRAL POINT IS SET
    GOTO	VALUE_SUB	;IF VALUE IS LESS THAN 127 THEN THE JOYSTICK WILL SUBTRACT FROM THE NEUTRAL POSITION
    BTFSC	ADC_T_1, 6	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	THREE_FOLD_SUM	;ADDS x3 TO THE MOVEMENT
    BTFSC	ADC_T_1, 4	
    GOTO	TWO_FOLD_SUM	;ADDS x2 TO THE MOVEMENT
    BTFSC	ADC_T_1, 3
    CALL	ONE_FOLD_SUM	;ADDS x1 TO THE MOVEMENT
FINISH    NOP
    RETURN
    
JOYSTICK_2_ACTION:
    BTFSS	ADC_T_2, 7	;CHECK IF ADC VALUE FROM X AXIS NEUTRAL POINT IS SET
    GOTO	VALUE_SUB_2	;IF VALUE IS LESS THAN 127 THEN THE JOYSTICK WILL SUBTRACT FROM THE NEUTRAL POSITION
    BTFSC	ADC_T_2, 6	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	THREE_FOLD_SUM_2	;ADDS x3 TO THE MOVEMENT
    BTFSC	ADC_T_2, 4	
    GOTO	TWO_FOLD_SUM_2	;ADDS x2 TO THE MOVEMENT
    BTFSC	ADC_T_2, 3
    CALL	ONE_FOLD_SUM_2	;ADDS x1 TO THE MOVEMENT
FINISH_2    NOP
    RETURN
    
VALUE_SUB:
    BTFSC	ADC_T_1, 5	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	ONE_FOLD_SUB	;SUBTRACT -1 TO THE MOVEMENT
    BTFSC	ADC_T_1, 3	
    GOTO	TWO_FOLD_SUB	;SUBTRACT -2 TO THE MOVEMENT
    BTFSC	ADC_T_1, 1
    GOTO	THREE_FOLD_SUB	;SUBTRACT -3 TO THE MOVEMENT
    GOTO	FINISH

;----------SUB_FUNCIONES_DE_JOYSTICK_1------------------------------------------
THREE_FOLD_SUM:		;ADDS +3 TO THE MOVEMENT
	INCF	JOYSTICK_X_1	
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_X_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
	INCF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_X_1
	INCF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_X_1
    GOTO	FINISH

TWO_FOLD_SUM:		;ADDS +2 TO THE MOVEMENT
	INCF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_X_1
	INCF	JOYSTICK_X_1
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_X_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
    GOTO	FINISH

ONE_FOLD_SUM:		;ADDS +1 TO THE MOVEMENT
	INCF	JOYSTICK_X_1
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_X_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
    RETURN

ONE_FOLD_SUB:		;SUB -1 TO THE MOVEMENT
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
    GOTO	FINISH

TWO_FOLD_SUB:		;SUB -2 TO THE MOVEMENT
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
    GOTO	FINISH

THREE_FOLD_SUB:		;SUB -3 TO THE MOVEMENT
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
    GOTO	FINISH
;----------SUB_FUNCIONES_DE_JOYSTICK_X_1 TERMINA----------------------------------
;-------------------------------------------------------------------------------
    
VALUE_SUB_2:
    BTFSC	ADC_T_1, 5	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	ONE_FOLD_SUB_2	;SUBTRACT x1 TO THE MOVEMENT
    BTFSC	ADC_T_1, 3	
    GOTO	TWO_FOLD_SUB_2	;SUBTRACT x2 TO THE MOVEMENT
    BTFSC	ADC_T_1, 1
    GOTO	THREE_FOLD_SUB_2	;SUBTRACT x3 TO THE MOVEMENT
    GOTO	FINISH_2

;----------SUB_FUNCIONES_DE_JOYSTICK_Y_1------------------------------------------
THREE_FOLD_SUM_2:		;ADDS +3 TO THE MOVEMENT
	INCF	JOYSTICK_Y_1	
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_Y_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
	INCF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_Y_1
	INCF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_Y_1
    GOTO	FINISH_2

TWO_FOLD_SUM_2:		;ADDS +2 TO THE MOVEMENT
	INCF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_Y_1
	INCF	JOYSTICK_Y_1
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_Y_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
    GOTO	FINISH_2

ONE_FOLD_SUM_2:		;ADDS +1 TO THE MOVEMENT
	INCF	JOYSTICK_Y_1
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_Y_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
    RETURN

ONE_FOLD_SUB_2:		;SUB -1 TO THE MOVEMENT
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
    GOTO	FINISH_2

TWO_FOLD_SUB_2:		;SUB -2 TO THE MOVEMENT
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
    GOTO	FINISH_2

THREE_FOLD_SUB_2:		;SUB -3 TO THE MOVEMENT
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
    GOTO	FINISH_2
;----------SUB_FUNCIONES_DE_JOYSTICK_Y_1 TERMINA----------------------------------
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;-----------------------------TMR0_CONFIGURATION--------------------------------
;------------------------------------------------------------------------------- 
TMR0_CONFIG:
    BANKSEL	OPTION_REG
    BCF		OPTION_REG, T0CS    ;SET TIMER MODE
    BCF		OPTION_REG, PSA	    ;SET PRE-SCALER TO TMR0 MODULE
    BCF		OPTION_REG, PS0	    
    BSF		OPTION_REG, PS1
    BCF		OPTION_REG, PS2
    BANKSEL	TMR0
    MOVLW	h'F6'		    ;SEND 131 TO TMR0 FOR A 1 us COUNT
    MOVWF	TMR0   
    RETURN
;-------------------------------------------------------------------------------
;---------------------------TX_RX__CONFIGURATION--------------------------------
;------------------------------------------------------------------------------- 
TX_RX_CONFIG:
    BANKSEL TXSTA
    BCF	    TXSTA, SYNC		    ; ASINCRÓNO
    BSF	    TXSTA, BRGH		    ; LOW SPEED
    BANKSEL BAUDCTL
    BSF	    BAUDCTL, BRG16	    ; 8 BITS BAURD RATE GENERATOR
    BANKSEL SPBRG
    MOVLW   .25	    
    MOVWF   SPBRG		    ; CARGAMOS EL VALOR DE BAUDRATE CALCULADO
    CLRF    SPBRGH
    BANKSEL RCSTA
    BSF	    RCSTA, SPEN		    ; HABILITAR SERIAL PORT
    BCF	    RCSTA, RX9		    ; SOLO MANEJAREMOS 8BITS DE DATOS
    BSF	    RCSTA, CREN		    ; HABILITAMOS LA RECEPCIÓN 
    BANKSEL TXSTA
    BSF	    TXSTA, TXEN		    ; HABILITO LA TRANSMISION
    
    BANKSEL PORTD
    CLRF    PORTD
;-------------------------------------------------------------------------------
;---------------------------OSCCON_CONFIGURATION--------------------------------
;-------------------------------------------------------------------------------   
OSCCON_CONFIG:
    BANKSEL	OSCCON
    BSF		OSCCON, IRCF0	;SET OSCILATION TO 8 M Hz
    BSF		OSCCON, IRCF1
    BSF		OSCCON, IRCF2
    RETURN 
;-------------------------------------------------------------------------------
;------------------------------PORT_CONFIGURATION-------------------------------
;-------------------------------------------------------------------------------
PORT_CONFIG:
    BCF		STATUS, RP0
    BCF		STATUS, RP1
    CLRF	PORTA		;CLEAR PORTS OF THE THEIR CONTENT
    CLRF	PORTB
    CLRF	PORTC
    CLRF	PORTD
    BSF		STATUS, RP0
    CLRF	TRISA		;SETS PORTS TO OUTPUT
    CLRF	TRISB
    CLRF	TRISC
    CLRF	TRISD
    RETURN
;-------------------------------------------------------------------------------
;---------------------------INTERRUPT_CONFIGURATION-----------------------------
;-------------------------------------------------------------------------------
INT_CONFIG:
    BSF	    STATUS, RP0	    ;ACCESS BANK 1
    BCF	    STATUS, RP1
    BSF	    INTCON, GIE
    BSF	    INTCON, PEIE
    BSF	    INTCON, T0IE
    BCF	    INTCON, T0IF
    
    BCF	    STATUS, RP0	    ;ACCESS BANK 0
    BCF	    PIR1, ADIF	    ;CLEAR INTERRUPT FLAGS OF ADC
    RETURN    
;-------------------------------------------------------------------------------
;------------------------------ADC_CONFIGURATION--------------------------------
;-------------------------------------------------------------------------------
ADC_CONFIG:			;FOF A 500kHz OSCILATION
    BSF		STATUS, RP0
    BCF		STATUS, RP1	;ACCESS BNK 1
 ;STEP 1 -> DISABLE PIN OUPUT DRIVER VIA TRIS AND CONFIG ANALOG PINS
    BSF		TRISA, RA0	;MAKE PORTA PINS 0 INPIUT
    BSF		TRISA, RA1	
    BSF		TRISA, RA2
    BSF		TRISA, RA3	;SWITCH BUTTON
    BSF		STATUS, RP0
    BSF		STATUS, RP1	;ACCESS BANC 4
    CLRF	ANSEL
    CLRF	ANSELH		;DISABLE HIGH ANALOG REGISTER TO FIGITAL
    BSF		ANSEL, ANS0	;ENABLE PIN RA0 AS ANALOG
    BSF		ANSEL, ANS1
    BSF		ANSEL, ANS2
    BSF		ANSEL, ANS3
 ;STEP 2 -> CONFIG ADC MODULE	*CHANNEL SELECTION CONFIG
    BCF		STATUS, RP0	
    BCF		STATUS, RP1	;ACCESS BANK 0
    CLRF	ADCON0		;SETS ANALOG CHANNEL TO AN0
    BSF		ADCON0, ADCS0	;SET ADC CLOCK TO Fosc/8
    BSF		STATUS, RP0	;ACCESS BANK 1
    CLRF	ADCON1		;SETS VOLTAGE REF. TO VDD AND VSS & LEFT JUSTIFIED
    BCF		STATUS, RP0	;RETURN TO BANK 0
    BSF		ADCON0, ADON	;ENABLES ADC
 ;STEP 3 -> WAIT AQUISITION TIME
 ;STEP 4 -> BEGIN CONVERSION BY SETTING THE ADCON0 GO/DONE BIT
 ;STEP 5 -> WAIT FOR THE ADC TO FINISH. CHECK GO/DONE BIT OR ADC INTERRUPT FLAG
 ;STEP 6 -> READ ADC RESULT FROM ADRESH FOR MSB AND ADRESL FOR LSB
 ;STEP 7 -> CLEAR ADC INTERRUPT FLAG
    RETURN      
    
 END
