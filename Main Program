;------------------------------------------------------------------------------
;UNIVSERSIDAD DEL VALLE DE GUATEMALA
;INTEGRANTES
;Bryan Sanders		    17294
;Matias			    carnet 16247
;
;FECHA: 10/11/2018
;Prgramacion para el control de cuatro distintos servos para el control de un 
;brazo de madera como proyecto final del curso de Microcontroladores.
;Se implementa un ADC para el manejo analogo de datos para tener un control mas
;preciso del brazo al igual que comunicacion serial para comunicarse con una
;commputadora que estara reciviendo y mandando datos hacia el PIC16877 el cual
;mandara los datos necesarios para mover los distintos servos.

#include "p16f887.inc"

; CONFIG1
; __config 0xFCD4
 __CONFIG _CONFIG1, _FOSC_INTRC_NOCLKOUT & _WDTE_OFF & _PWRTE_OFF & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _BOREN_OFF & _IESO_OFF & _FCMEN_OFF & _LVP_OFF
; CONFIG2
; __config 0xFFFF
 __CONFIG _CONFIG2, _BOR4V_BOR40V & _WRT_OFF
 
GPR_VAR	    UDATA
DIS         RES 1
DIS2        RES 1
DELAY1	    RES	1
W_TEMP	    RES	1
STATUS_TEMP RES	1
CONTA2      RES 1
CONTA1      RES 1
M           RES 1
N           RES 1
O           RES 1
MANUAL1     RES 1
MANUAL2     RES 1
MANUAL3     RES 1
MANUAL4     RES 1
LIMITE1      RES 1
LIMITE2     RES 1
LIMITE3     RES 1
LIMITE4     RES 1
JOYSTICK_X_1 RES 1
JOYSTICK_Y_1 RES 1
ADC_T_1      RES 1
ADC_T_2      RES 1    
RES_VECT    CODE    0x0000		; processor reset vector
    GOTO    START			; go to beginning of program

ISR_VECT    CODE    0x0004
PUSH:
    BCF     INTCON,GIE  
    MOVWF   W_TEMP
    SWAPF   STATUS,W
    MOVWF   STATUS_TEMP
   
ISR:
    
    BTFSC   INTCON,T0IF  ;REVISO BANDERA 
    CALL    FUE_TMR0
    
    

POP2:
    SWAPF   STATUS_TEMP,W
    MOVWF   STATUS
    SWAPF   W_TEMP,F
    SWAPF   W_TEMP,W
    BSF     INTCON,GIE
    RETFIE
 
FUE_TMR0:
    
    BCF	    INTCON,T0IF
    MOVLW   .246
    
    MOVWF   TMR0
    
  
    
    INCF    MANUAL1,F
    MOVF    MANUAL1,W
    SUBWF   LIMITE1,W
    BTFSS  STATUS,C
    GOTO    APAGADO1
    GOTO    ENCENDIDO1
    GOTO MOTOR2
    
APAGADO1:
    BCF	    PORTB, 0
    GOTO    MOTOR2
ENCENDIDO1:
    BSF	    PORTB, 0
    GOTO    MOTOR2
MOTOR2:
    INCF    MANUAL2,F
    MOVF    MANUAL2,W
    SUBWF   LIMITE2,W
    BTFSS   STATUS,C
    GOTO    APAGADO2
    GOTO    ENCENDIDO2
    GOTO MOTOR3
APAGADO2:
    BCF	    PORTB, 1
    GOTO MOTOR3
ENCENDIDO2:
    BSF	    PORTB, 1
    GOTO MOTOR3
MOTOR3:
    INCF    MANUAL3,F
    MOVF    MANUAL3,W
    SUBWF   LIMITE3,W
    BTFSS  STATUS,C
    GOTO    APAGADO3
    GOTO    ENCENDIDO3
    GOTO MOTOR4
    
APAGADO3:
    BCF	    PORTB, 2
    GOTO    MOTOR4
ENCENDIDO3:
    BSF	    PORTB, 2
    GOTO    MOTOR4
MOTOR4:
    INCF    MANUAL4,F
    MOVF    MANUAL4,W
    SUBWF   LIMITE4,W
    BTFSS   STATUS,C
    GOTO    APAGADO4
    GOTO    ENCENDIDO4
    RETURN
APAGADO4:
    BCF	    PORTB, 3
    RETURN
ENCENDIDO4:
    BSF	    PORTB, 3
    RETURN
; TODO ADD INTERRUPTS HERE IF USED
;-------------------------------PRINCIPAL---------------------------------------
MAIN_PROG CODE                      ; let linker place main program

START
CONFIG_OSCILATOR:
    BANKSEL TRISA
    BSF OSCCON, IRCF2
    BSF OSCCON, IRCF1
    BSF OSCCON, IRCF0		    ; FRECUECNIA DE 500kHz
   
CCONFIG_IO:
    BANKSEL TRISA
    CLRF    TRISA
    BSF	    TRISA, RA0	; RA0 COMO ENTRADA
    BSF     TRISA, RA1
    BSF     TRISA, RA2
    BSF     TRISA, RA3
    CLRF    TRISB
    CLRF    TRISC
    CLRF    TRISE
    MOVLW   b'11111111'
    MOVWF   TRISD
    BANKSEL ANSEL
    CLRF    ANSEL
    CLRF    ANSELH
    BSF	    ANSEL, 0	; ANS0 COMO ENTRADA ANALÓGICA
    BSF     ANSEL, 1
    BSF	    ANSEL, 2	
    BSF	    ANSEL, 3	; ANS0 COMO ENTRADA ANALÓGI; ANS0 COMO ENTRADA ANALÓGICA
    BANKSEL PORTA
    CLRF    PORTA
    CLRF    PORTB
    CLRF    PORTC
    CLRF    PORTD
    CLRF     TMR0
    MOVLW   .246
    
    MOVWF   TMR0

  
CONFIG_ADC:
    BANKSEL PORTA
    BSF ADCON0, ADCS1
    BCF ADCON0, ADCS0		; FOSC/8 RELOJ TAD
    
   	
    BANKSEL TRISA
    BCF ADCON1, ADFM		; JUSTIFICACIÓN A LA IZQUIERDA
    BCF ADCON1, VCFG1		; VSS COMO REFERENCIA VREF-
    BCF ADCON1, VCFG0		; VDD COMO REFERENCIA VREF+
    BANKSEL PORTA
    BSF ADCON0, ADON		; ENCIENDO EL MÓDULO ADC
CONFIG_TX_RX:
    BANKSEL TXSTA
    BCF	    TXSTA, SYNC		    ; ASINCRÓNO
    BSF	    TXSTA, BRGH		    ; LOW SPEED
    BANKSEL BAUDCTL
    BSF	    BAUDCTL, BRG16	    ; 8 BITS BAURD RATE GENERATOR
    BANKSEL SPBRG
    MOVLW   .25	    
    MOVWF   SPBRG		    ; CARGAMOS EL VALOR DE BAUDRATE CALCULADO
    CLRF    SPBRGH
    BANKSEL RCSTA
    BSF	    RCSTA, SPEN		    ; HABILITAR SERIAL PORT
    BCF	    RCSTA, RX9		    ; SOLO MANEJAREMOS 8BITS DE DATOS
    BSF	    RCSTA, CREN		    ; HABILITAMOS LA RECEPCIÓN 
    BANKSEL TXSTA
    BSF	    TXSTA, TXEN		    ; HABILITO LA TRANSMISION
    
    BANKSEL PORTD
    CLRF    PORTD
CONFIG_TMR0:        ;CONFIGURACION TIMER 0
  
   BANKSEL TRISA
   
   BCF     OPTION_REG,T0CS
   BCF     OPTION_REG,PSA
   BCF     OPTION_REG,PS2
   BSF     OPTION_REG,PS1
   BCF     OPTION_REG,PS0
   
   BANKSEL PORTA
CONFIG_INTERUPT
    BANKSEL PORTA
    BSF	    INTCON,GIE
    BSF	    INTCON,T0IE  ; timer0 
    BSF	    INTCON,PEIE

GOTO LOOP
LOOP2
    BTFSC PORTD,RD1
    GOTO LOOP
ESPERA1:    
    BTFSS   PIR1,RCIF  ; Espera un carácter,
    GOTO    ESPERA1
    MOVF    RCREG,W
    MOVWF   LIMITE1
    RRF	    ADRESH, F 
    RRF	    ADRESH, W
    ANDLW   B'00111111'
    MOVWF   LIMITE1
    BTFSC PORTD,RD1
    GOTO LOOP
ESPERA2:    
    BTFSS   PIR1,RCIF  ; Espera un carácter,
    GOTO    ESPERA2
    MOVF    RCREG,W
    MOVWF   LIMITE2
    RRF	    ADRESH, F 
    RRF	    ADRESH, W
    ANDLW   B'00111111'
    MOVWF   LIMITE2
    BTFSC PORTD,RD1
    GOTO LOOP
ESPERA3:    
    BTFSS   PIR1,RCIF  ; Espera un carácter,
    GOTO    ESPERA3
    MOVF    RCREG,W
    MOVWF   LIMITE3
    RRF	    ADRESH, F 
    RRF	    ADRESH, W
    ANDLW   B'00111111'
    MOVWF   LIMITE3
    BTFSC PORTD,RD1
    GOTO LOOP
ESPERA4:    
    BTFSS   PIR1,RCIF  ; Espera un carácter,
    GOTO    ESPERA4
    MOVF    RCREG,W
    MOVWF   LIMITE4
    RRF	    ADRESH, F 
    RRF	    ADRESH, W
    ANDLW   B'00111111'
    MOVWF   LIMITE4
    BTFSC PORTD,RD1
    GOTO LOOP
    
    GOTO LOOP2
LOOP
    BTFSC PORTD,0
    GOTO LOOP2
    
 
    BANKSEL PORTA
    BCF ADCON0, CHS3
    BCF ADCON0, CHS2
    BCF ADCON0, CHS1
    BCF ADCON0, CHS0		;LECTURA DE AN0
	
    BSF ADCON0, GO
    
   
CHECKADC:


    BTFSC   ADCON0, GO
    GOTO    CHECKADC
    BTFSS   PIR1, TXIF
    GOTO    $-1
    MOVF    ADRESH, W 
    MOVWF	ADC_T_1		    ;MOVE W VALUE TO THE ADC_T_1 CHECK
    CALL	JOYSTICK_1_ACTION   ;GO TO THE ADC ACTION LOGIC FOR JOY_S_1
    MOVWF   TXREG
    RRF	    ADRESH, F 
    RRF	    ADRESH, W
    ANDLW   B'00111111'
    MOVWF   LIMITE1

    BCF ADCON0, CHS3
    BCF ADCON0, CHS2
    BCF ADCON0, CHS1
    BSF ADCON0, CHS0
    BSF ADCON0, GO
CHECKADC2: 
    BTFSC   ADCON0, GO
    GOTO    CHECKADC2
    BTFSS   PIR1, TXIF
    GOTO    $-1
    MOVF    ADRESH, W 
    MOVWF	ADC_T_2		    ;MOVE W VALUE TO ADC_T_2 CHECK
    CALL	JOYSTICK_1_ACTION   ;GO TO THE ADC ACTION LOGIC FOR JOY_S_2  
    MOVWF   TXREG
 
    
    RRF	    ADRESH, F 
    
    RRF	    ADRESH, W 
    ANDLW   B'00111111'
    MOVWF   LIMITE2

    BCF ADCON0, CHS3
    BCF ADCON0, CHS2
    BSF ADCON0, CHS1
    BCF ADCON0, CHS0
    BSF ADCON0, GO
CHECKADC3: 
    BTFSC   ADCON0, GO
    GOTO    CHECKADC3
    BTFSS   PIR1, TXIF
    GOTO    $-1
    MOVF    ADRESH, W 
    MOVWF   TXREG
    RRF ADRESH,F
    
    RRF ADRESH,W
    
    
    ANDLW   B'00111111'
    MOVWF LIMITE3

    BCF ADCON0, CHS3
    BCF ADCON0, CHS2
    BSF ADCON0, CHS1
    BSF ADCON0, CHS0
    BSF ADCON0, GO
CHECKADC4:
    BTFSC   ADCON0, GO
    GOTO    CHECKADC4
    		    ; ENVÍA PORTB POR EL TX
    
   
    BTFSS   PIR1, TXIF
    GOTO    $-1
    MOVF    ADRESH, W 
    MOVWF   TXREG
    RRF ADRESH,F
    RRF ADRESH,W
    ANDLW   B'00111111'
    MOVWF LIMITE4
   
    BCF ADCON0, CHS3
    BSF ADCON0, CHS2
    BCF ADCON0, CHS1
    BCF ADCON0, CHS0
    BSF ADCON0, GO
CHECK5:
    BTFSS   PIR1, TXIF
    GOTO    $-1
    MOVF    ADRESH, W
   
    BTFSS   PIR1, TXIF
    GOTO    $-1
    ADDLW  .13
    MOVWF   TXREG
 
    
    GOTO LOOP
JOYSTICK_1_ACTION:
    BTFSS	ADC_T_1, 7	;CHECK IF ADC VALUE FROM X AXIS NEUTRAL POINT IS SET
    GOTO	VALUE_SUB	;IF VALUE IS LESS THAN 127 THEN THE JOYSTICK WILL SUBTRACT FROM THE NEUTRAL POSITION
    BTFSC	ADC_T_1, 6	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	THREE_FOLD_SUM	;ADDS x3 TO THE MOVEMENT
    BTFSC	ADC_T_1, 4	
    GOTO	TWO_FOLD_SUM	;ADDS x2 TO THE MOVEMENT
    BTFSC	ADC_T_1, 3
    CALL	ONE_FOLD_SUM	;ADDS x1 TO THE MOVEMENT
FINISH    NOP
    RETURN
    
JOYSTICK_2_ACTION:
    BTFSS	ADC_T_2, 7	;CHECK IF ADC VALUE FROM X AXIS NEUTRAL POINT IS SET
    GOTO	VALUE_SUB_2	;IF VALUE IS LESS THAN 127 THEN THE JOYSTICK WILL SUBTRACT FROM THE NEUTRAL POSITION
    BTFSC	ADC_T_2, 6	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	THREE_FOLD_SUM_2	;ADDS x3 TO THE MOVEMENT
    BTFSC	ADC_T_2, 4	
    GOTO	TWO_FOLD_SUM_2	;ADDS x2 TO THE MOVEMENT
    BTFSC	ADC_T_2, 3
    CALL	ONE_FOLD_SUM_2	;ADDS x1 TO THE MOVEMENT
FINISH_2    NOP
    RETURN
    
VALUE_SUB:
    BTFSC	ADC_T_1, 5	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	FINISH		;SUBTRACT -1 TO THE MOVEMENT
    BTFSC	ADC_T_1, 3	
    GOTO	FINISH		;SUBTRACT -2 TO THE MOVEMENT
    BTFSC	ADC_T_1, 1
    GOTO	THREE_FOLD_SUB	;SUBTRACT -3 TO THE MOVEMENT
    GOTO	FINISH

;----------SUB_FUNCIONES_DE_JOYSTICK_1------------------------------------------
THREE_FOLD_SUM:		;ADDS +3 TO THE MOVEMENT
	INCF	JOYSTICK_X_1	
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_X_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
	INCF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_X_1
    GOTO	FINISH

THREE_FOLD_SUB:		;SUB -3 TO THE MOVEMENT
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
	DECF	JOYSTICK_X_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_X_1
    GOTO	FINISH
;----------SUB_FUNCIONES_DE_JOYSTICK_X_1 TERMINA--------------------------------
;-------------------------------------------------------------------------------
    
VALUE_SUB_2:
    BTFSC	ADC_T_1, 5	;CHECK IF THE ADC BIT 6 FROM THE X AXIS IS CLEAR
    GOTO	FINISH_2	;SUBTRACT x1 TO THE MOVEMENT
    BTFSC	ADC_T_1, 3	
    GOTO	FINISH_2	;SUBTRACT x2 TO THE MOVEMENT
    BTFSC	ADC_T_1, 1
    GOTO	THREE_FOLD_SUB_2	;SUBTRACT x3 TO THE MOVEMENT
    GOTO	FINISH_2

;----------SUB_FUNCIONES_DE_JOYSTICK_Y_1------------------------------------------
THREE_FOLD_SUM_2:		;ADDS +3 TO THE MOVEMENT
	INCF	JOYSTICK_Y_1	
    BTFSC	STATUS, Z	;BIT CHECK OF THE STATUS ZERO TO VERIFY OVERFLOW
    DECF	JOYSTICK_Y_1	;IF BIT IS SET, DECREASE THE FILE AS TO KEEP IT AT 255
	INCF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    DECF	JOYSTICK_Y_1
    GOTO	FINISH_2

THREE_FOLD_SUB_2:		;SUB -3 TO THE MOVEMENT
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
	DECF	JOYSTICK_Y_1
    BTFSC	STATUS, Z
    INCF	JOYSTICK_Y_1
    GOTO	FINISH_2
;----------SUB_FUNCIONES_DE_JOYSTICK_Y_1 TERMINA--------------------------------
;------------------------------------------------------------------------------- 
MEMORIA:
    BANKSEL EEADR
    MOVLW   .0
    MOVWF  EEADR
    BANKSEL ADRESH
    MOVF   ADRESH,W
    BANKSEL EEADR  
    MOVWF  EEDAT
    MOVWF PORTB
    BANKSEL EECON1
    BCF EECON1,EEPGD
    BSF EECON1,WREN
    
    BCF INTCON,GIE
    BTFSC INTCON,GIE
    GOTO $-2
    MOVLW 0x55
    MOVWF EECON2
    MOVLW 0xAA
    MOVWF EECON2
    BSF EECON1,WR
    BSF INTCON,GIE
    
    CALL DELAY
    BCF  EECON1,WREN
    BCF STATUS,RP0
    BCF STATUS,RP1
    
    RETURN   

;------------------------------SUBRUTINAS---------------------------------------
 
DELAY_500US
    MOVLW   .250		    ; 1US 
    MOVWF   DELAY1	    
    DECFSZ  DELAY1		    ;DECREMENTA CONT1
    GOTO    $-1			    ; IR A LA POSICION DEL PC - 1
    RETURN
;----------------------------CONFIGURACIONES----------------------------------    

DELAY
    MOVLW .5
    MOVWF CONTA2
CONFIG1:	
    MOVLW .10
    MOVWF CONTA1
RESTA2:    
    DECFSZ CONTA1, F
    GOTO RESTA2
	DECFSZ CONTA2, 
	GOTO CONFIG1
    RETURN

    END


